/*    AgeCreator: A level editor for Uru    Copyright (C) 2010 Branan Riley    This program is free software: you can redistribute it and/or modify    it under the terms of the GNU General Public License as published by    the Free Software Foundation, either version 3 of the License, or    (at your option) any later version.    This program is distributed in the hope that it will be useful,    but WITHOUT ANY WARRANTY; without even the implied warranty of    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the    GNU General Public License for more details.    You should have received a copy of the GNU General Public License    along with this program.  If not, see <http://www.gnu.org/licenses/>.*/#include "ACObjectNameProperty.h"#include "ACObjectName.h"#include "ACUtil.h"#include <QLineEdit>#include <QRegExpValidator>ACObjectNameProperty::ACObjectNameProperty(const QString &name, QObject *propertyObject, QObject *parent)  : Property(name, propertyObject, parent){}QWidget *ACObjectNameProperty::createEditor(QWidget *parent, const QStyleOptionViewItem &option){  QLineEdit *edit = new QLineEdit(parent);  QRegExp exp(ascii("[a-zA-Z0-9]+"));  QRegExpValidator *validator = new QRegExpValidator(exp, this);  edit->setValidator(validator);  edit->setFrame(false);  edit->setText(value(Qt::DisplayRole).toString());  connect(edit, SIGNAL(editingFinished()), this, SLOT(updateText()));  return edit;}QVariant ACObjectNameProperty::value(int role) const{  QString name = objectName();  if (m_propertyObject)    if(role == Qt::DisplayRole)      return QVariant(QString(m_propertyObject->property(qPrintable(objectName())).value<ACObjectName>()));    else      return m_propertyObject->property(qPrintable(objectName()));  else    return QVariant();}void ACObjectNameProperty::setValue(const QVariant &value){  if (m_propertyObject) {    if(value.userType() == QMetaType::type("ACObjectName")) {      m_propertyObject->setProperty(qPrintable(objectName()), value);    } else {      m_propertyObject->setProperty(qPrintable(objectName()), QVariant::fromValue<ACObjectName>(ACObjectName(value.toString())));    }  }}QVariant ACObjectNameProperty::editorData(QWidget *widget){  QLineEdit *edit = qobject_cast<QLineEdit*>(widget);  if(!edit)    return QVariant();  return QVariant::fromValue(ACObjectName(edit->text()));}bool ACObjectNameProperty::setEditorData(QWidget *widget, const QVariant &data){  QLineEdit *edit = qobject_cast<QLineEdit*>(widget);  if(!edit)    return false;  if(data.userType() == QMetaType::type("ACObjectName"))    edit->setText(data.value<ACObjectName>());  else if(data.userType() == QVariant::String)    edit->setText(data.toString());  else    return false;  return true;}void ACObjectNameProperty::updateText(){  QLineEdit *edit = qobject_cast<QLineEdit*>(sender());  setValue(QVariant(edit->text()));}